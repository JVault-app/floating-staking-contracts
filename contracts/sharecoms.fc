#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";

global int storage::init?;

global slice storage::pool_address;           ;; Address of the pool from which commissions arrives. (MsgAddress)
global slice storage::pool_admin_address;     ;; Address of the pools admin that deployed this contract. (MsgAddress) 

global int   storage::last_commission_time;   ;; Last commission artival time (max key in the commissions dict). (uint32)
global int   storage::all_commissions;        ;; Amount of all collected commissions (Coins)

global slice storage::jvt_staking_address;    ;; Address of the current JVT staking pool. (MsgAddress)
global slice storage::jetton_wallet_address;  ;; Address of the jetton wallet in which commissions are stored. (MsgAddress)

global cell  storage::nft_item_code;          ;; Code of JVT Bond NFTs. (Cell)
global cell  storage::nfts_dict;              ;; Key = nft address (uint256); value = last claimed commission arrival time (uint32). (HashMapE)
global cell  storage::commissions_dict;       ;; Key = commission arrival time (uint32); value = amount of claimable commissions per `sharecoms_devider` staked JVT (uint256). First element is (0: 0). (HashMapE)


() load_data() impure inline {
    slice ds = get_data().begin_parse();
    storage::pool_address           = ds~load_msg_addr();
    storage::pool_admin_address     = ds~load_msg_addr();
    storage::init? = 0;

    if(ds.slice_bits() > 0) { 
        storage::init? = 1;
        storage::last_commission_time   = ds~load_uint(32);
        storage::all_commissions        = ds~load_coins();

        slice jettons = ds~load_ref().begin_parse();
        storage::jvt_staking_address    = jettons~load_msg_addr();
        storage::jetton_wallet_address  = jettons~load_msg_addr();

        storage::nft_item_code          = ds~load_ref();

        storage::nfts_dict             = ds~load_dict();
        storage::commissions_dict        = ds~load_dict();
    } 
}


() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::pool_address)
            .store_slice(storage::pool_admin_address)
            .store_uint(storage::last_commission_time, 32)
            .store_coins(storage::all_commissions)
            .store_ref(
                begin_cell()
                    .store_slice(storage::jvt_staking_address)
                    .store_slice(storage::jetton_wallet_address)
                .end_cell()
            )
            .store_ref(storage::nft_item_code)
            .store_dict(storage::nfts_dict)
            .store_dict(storage::commissions_dict)
        .end_cell()
    );
}


() claim_commissions(slice nft_address, slice nft_owner_address, int query_id, int time_nft, int staked_jvt) impure inline {
    (int wc, int user_id) = parse_std_addr(nft_address);
    throw_unless(333, wc == 0);

    (slice nfts_dict_value, int success) = storage::nfts_dict.udict_get?(256, user_id);
    int last_claimed_commission_time = 0;
    if (success){
        last_claimed_commission_time = nfts_dict_value~load_uint(32);
    }
    else { 
        (last_claimed_commission_time, _, _) = storage::commissions_dict.udict_get_prev?(32, time_nft);
    }
    throw_unless(exc::nothing_to_claim, last_claimed_commission_time < storage::last_commission_time);

    (slice commision_dict_value, _) = storage::commissions_dict.udict_get?(32, last_claimed_commission_time);
    int claimed_commissions  = commision_dict_value~load_uint(256); 
    
    (commision_dict_value, _) = storage::commissions_dict.udict_get?(32, storage::last_commission_time);
    int total_commissions  = commision_dict_value~load_uint(256);

    int nft_share = muldiv(total_commissions - claimed_commissions, staked_jvt, sharecoms_devider);
    send_jettons(query_id, nft_share, nft_owner_address, nft_owner_address, storage::jetton_wallet_address, 0, 64, 1, null());

    storage::nfts_dict~udict_set(256, user_id, begin_cell().store_uint(storage::last_commission_time, 32).end_cell().begin_parse());

    save_data();
    return ();
}

() add_commission(int commission_arrival_time, int commission_amount, int jvt_pool_tvl) impure inline {
    (slice commision_dict_value, _) = storage::commissions_dict.udict_get?(32, storage::last_commission_time);
    int total_commissions  = commision_dict_value~load_uint(256);
    total_commissions += muldiv(sharecoms_devider, commission_amount, jvt_pool_tvl);
    storage::commissions_dict~udict_set(32, commission_arrival_time, begin_cell().store_uint(total_commissions, 256).end_cell().begin_parse());
    storage::last_commission_time = commission_arrival_time;
    storage::all_commissions += commission_amount;
    
    save_data();
    return ();
}


() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sedner_address = cs~load_msg_addr();

    load_data();

    if (storage::init? == 0) {
        throw_unless(405, equal_slices(sedner_address, storage::pool_admin_address));
        
        storage::last_commission_time   = 0;
        storage::jvt_staking_address    = in_msg_body~load_msg_addr();
        storage::jetton_wallet_address  = in_msg_body~load_msg_addr();
        storage::nft_item_code          = in_msg_body~load_ref();
        storage::nfts_dict              = new_dict();
        storage::commissions_dict       = new_dict();
        storage::commissions_dict~udict_set(32, 0, begin_cell().store_uint(0, 256).end_cell().begin_parse());

        builder get_wallet_msg = begin_cell()
                                    .store_uint(0x18, 6)
                                    .store_slice(storage::jetton_wallet_address)
                                    .store_coins(gas::provide_addr)
                                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                                    .store_uint(op::provide_wallet_address, 32)
                                    .store_uint(now(), 64)
                                    .store_slice(my_address())
                                    .store_uint(0, 1);
        send_raw_message(get_wallet_msg.end_cell(), 1);  ;; request jetton wallet address after deploy
        
        save_data();
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::report_storage_data) {
        slice from_address = in_msg_body~load_msg_addr();
        int   report_time  = in_msg_body~load_uint(32);
        slice report_data  = in_msg_body~load_ref().begin_parse();
        slice payload      = in_msg_body~load_ref().begin_parse();

        int inner_op = payload~load_uint(32);

        if (inner_op == op::update_sharecoms) {
            throw_unless(exc::incorrect_sender, 
                         equal_slices(from_address, my_address()) & equal_slices(sedner_address, storage::jvt_staking_address));

            ;; load actual jvt staking TVL
            report_data~skip_bits(65);
            int  jvt_last_tvl           = report_data~load_coins();
            ;; load last commissions amount
            int commissions_amount      = payload~load_coins();

            add_commission(report_time, commissions_amount, jvt_last_tvl);

            ;; send excesses to pool_admin
            builder msg = begin_cell()
                            .store_uint(0x18, 6)
                            .store_slice(storage::pool_admin_address)
                            .store_coins(0)
                            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                            .store_uint(op::excesses, 32)
                            .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 64); 

            return ();
        }
        elseif (inner_op == op::claim_commissions) {
            throw_unless(exc::out_of_gas, msg_value >= gas::jetton_transfer);
            throw_unless(exc::nothing_to_claim, storage::last_commission_time);

            ;; load reported data of the NFT
            int   nft_collection_index   = report_data~load_uint(32);
            slice nft_collection_address = report_data~load_msg_addr();
            slice nft_owner_address      = report_data~load_msg_addr();
            int   nft_start_time         = report_data~load_uint(32);
            int   nft_unlock_time        = report_data~load_uint(32);
            int   nft_locked_value       = report_data~load_coins();
            int   nft_claimed_rewards    = report_data~load_coins();
            int   nft_is_transferrable   = report_data~load_uint(1);
            int   nft_withdrawal_allowed = report_data~load_uint(1);
            int   nft_is_active          = report_data~load_uint(1);
            
            ;; check that nft is from the JVT staking collection
            slice expected_nft_address = calculate_nft_address_by_index(storage::jvt_staking_address, storage::nft_item_code, nft_collection_index);
            throw_unless(exc::incorrect_sender, equal_slices(sedner_address, expected_nft_address)); 
            throw_unless(exc::nft_burned, nft_is_active);

            claim_commissions(sedner_address, nft_owner_address, query_id, nft_start_time, nft_locked_value);

            return();
        }
    }

    if (op == op::transfer_notification) {
        throw_unless(exc::incorrect_jetton, equal_slices(sedner_address, storage::jetton_wallet_address));

        int commission_amount = in_msg_body~load_coins();
        builder msg = begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(storage::jvt_staking_address)
                        .store_coins(0)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_uint(op::get_storage_data, 32)
                        .store_uint(query_id, 64)
                        .store_slice(my_address())
                        .store_ref(
                            begin_cell()
                                .store_uint(op::update_sharecoms, 32)
                                .store_coins(commission_amount)
                            .end_cell()
                        );
        send_raw_message(msg.end_cell(), 64);
    
        return();
    }

    if (op == op::take_wallet_address) {  ;; change jetton wallet address (used only once)
        throw_unless(exc::incorrect_sender, equal_slices(storage::jetton_wallet_address, sedner_address));
        storage::jetton_wallet_address = in_msg_body~load_msg_addr();

        save_data();
        return ();
    }

    if (op == 15) {
        storage::jvt_staking_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    throw(0xffff);
}


;; GET methods

slice get_jetton_wallet_adress() method_id {
    load_data();
    return storage::jetton_wallet_address;
}

int get_commissions_per_devider() method_id {
    load_data();
    (slice commision_dict_value, _) = storage::commissions_dict.udict_get?(32, storage::last_commission_time);
    return commision_dict_value~load_uint(256);
}

int get_last_claimed_commission_time(int user_id) method_id {
    load_data();
    (slice dict_value, int success) = storage::nfts_dict.udict_get?(256, user_id);
    return (success ? dict_value~load_uint(32) : 0);
}

int get_claimable_commissions_by_time(int time, int staked_jvt) method_id {
    (int last_commission, _, _) = storage::commissions_dict.udict_get_preveq?(32, time);

    (slice commision_dict_value, _) = storage::commissions_dict.udict_get?(32, storage::last_commission_time);
    int claimed_commissions  = commision_dict_value~load_uint(256);  ;; last commission claimed by NFT
    
    (commision_dict_value, _) = storage::commissions_dict.udict_get?(32, storage::last_commission_time);
    int total_commissions  = commision_dict_value~load_uint(256);  ;; total commissionss

    return muldiv(total_commissions - claimed_commissions, staked_jvt, sharecoms_devider);
}

(cell, cell) get_dicts() method_id {
    load_data();
    return (storage::nfts_dict, storage::commissions_dict);
}

(slice, slice, int, int, slice, slice, cell, cell, cell) get_storage_data() method_id {
    load_data();
    return (storage::pool_address, storage::pool_admin_address, storage::last_commission_time,
             storage::all_commissions, storage::jvt_staking_address, storage::jetton_wallet_address,
             storage::nft_item_code, storage::nfts_dict, storage::commissions_dict);
}

int get_version() method_id {
    return 2002;
}