#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/exceptions.fc";
#include "imports/gas.fc";
#include "imports/utils.fc";


global int storage::init?;                   ;; is NFT initialized? (uint1)
global int storage::collection_index;        ;; index of this NFT in collection (uint32)
global slice storage::collection_address;    ;; address of NFT collection (MsgAddress)
global slice storage::owner_address;         ;; address of the NFT owner (MsgAddress)
global int storage::index_in_states;         ;; index of this NFT in states_dict (uint32)
global int storage::locked_value;            ;; amount of locked coins (Coins)
global int storage::start_time;              ;; staking start timestamp (uint32)
global int storage::unlock_time;             ;; jettons unlock timestamp (uint32) 
global int storage::claimed_rewards;         ;; claimed rewards (Coins)
global int storage::is_transferrable;        ;; does this NFT allows transfers (uint1)
global int storage::withdrawal_allowed;       ;; does this NFT allow to withdraw staked jettons? always 1 for normal pools (uint1)
;; global cell storage::content;


() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::collection_index   = ds~load_uint(32);
    storage::collection_address = ds~load_msg_addr();
    storage::init?              = 0;

    if (ds.slice_bits() > 0) {
        storage::init?              = 1;
        storage::owner_address      = ds~load_msg_addr();
        storage::index_in_states    = ds~load_uint(32);
        storage::locked_value       = ds~load_coins();
        storage::unlock_time        = ds~load_uint(32);
        ;; storage::force_unstake     = ds~load_uint(16);
        storage::claimed_rewards    = ds~load_coins();
        storage::start_time         = ds~load_uint(32);
        storage::is_transferrable   = ds~load_uint(1);
        storage::withdrawal_allowed = ds~load_uint(1);
    }
}


() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(storage::collection_index, 32)
            .store_slice(storage::collection_address)
            .store_slice(storage::owner_address)
            .store_uint(storage::index_in_states, 32)
            .store_coins(storage::locked_value)
            .store_uint(storage::unlock_time, 32)
            ;; .store_uint(storage::force_unstake, 16)
            .store_coins(storage::claimed_rewards)
            .store_uint(storage::start_time, 32)
            .store_uint(storage::is_transferrable, 1)
            .store_uint(storage::withdrawal_allowed, 1)
            ;; .store_ref(storage::content)
            .end_cell()
    );
}

;; remains from simple NFT
() transfer_ownership(int my_balance, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, int is_transferrable) impure inline { 
    throw_unless(401, equal_slices(sender_address, storage::owner_address));
    throw_unless(exc::transfer_not_allowed, (is_transferrable == 1));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();
    throw_unless(708, slice_bits(in_msg_body) >= 1);

    int rest_amount = my_balance - gas::min_tons_for_storage;
    if (forward_amount) {
        rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
        rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op::ownership_assigned_nft, query_id, begin_cell().store_slice(storage::owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op::excesses, query_id, null(), 1); ;; paying fees, revert on errors
    }

    storage::owner_address = new_owner_address;
    save_data();
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {  ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr();  ;; skip dst
    cs~load_coins();  ;; skip value
    cs~skip_bits(1);  ;; skip extracurrency collection
    cs~load_coins();  ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 1);  ;; we use message fwd_fee for estimation of forward_payload costs


    load_data();
    if (storage::init? == 0) {
        throw_unless(405, equal_slices(storage::collection_address, sender_address));
        in_msg_body~skip_bits(64);
        storage::owner_address    = in_msg_body~load_msg_addr();
        storage::index_in_states  = in_msg_body~load_uint(32);
        storage::locked_value     = in_msg_body~load_coins();
        storage::unlock_time      = in_msg_body~load_uint(32);
        ;; storage::force_unstake   = in_msg_body~load_uint(1);
        storage::is_transferrable = in_msg_body~load_uint(1);
        storage::withdrawal_allowed = in_msg_body~load_uint(1);
        storage::claimed_rewards  = 0;
        storage::start_time       = now();

        var msg = begin_cell()
                      .store_uint(0x10, 6) 
                      .store_slice(storage::owner_address)  ;; previous owner address
                      .store_coins(msg_value - gas::min_tons_for_storage)
                      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                      .store_uint(op::ownership_assigned_nft, 32)
                      .store_uint(0, 64)
                    .end_cell();
        send_raw_message(msg, 0);  ;; notify owner about mint

        save_data();
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_nft) {  
        transfer_ownership(my_balance, sender_address, query_id, in_msg_body, fwd_fee, storage::is_transferrable);
        return ();
    }

    if ((op == op::claim_nft) | (op == op::withdraw_nft)) {  ;; withdraw rewards or close position
        if (op == op::withdraw_nft) {
            throw_unless(exc::out_of_gas, msg_value >= gas::withdraw_nft);
            throw_unless(exc::not_unlocked_yet, now() >= storage::unlock_time);
        }
        else {
            throw_unless(exc::out_of_gas, msg_value >= gas::claim_nft);
        }
        throw_unless(exc::incorrect_sender, equal_slices(storage::owner_address, sender_address));
        builder payload = begin_cell()
                            .store_uint(storage::collection_index, 32)
                            .store_slice(storage::owner_address)
                            .store_uint(storage::index_in_states, 32)
                            .store_coins(storage::locked_value)
                            .store_uint(storage::withdrawal_allowed, 1);
        send_msg(storage::collection_address, 0, op, query_id, payload, 64);
        
        return ();
    }

    if (op == op::change_state_nft) {  ;;  change nft state after claim
        throw_unless(exc::incorrect_sender, equal_slices(storage::collection_address, sender_address));
        storage::index_in_states = in_msg_body~load_uint(32);
        storage::claimed_rewards = in_msg_body~load_coins();

        save_data();
        return ();
    }

    if (op == op::burn_nft) {  ;; burn nft after unstaking
        throw_unless(exc::incorrect_sender, equal_slices(storage::collection_address, sender_address));
        slice prev_owner = storage::owner_address;
        storage::owner_address = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;
        save_data();

        send_msg(prev_owner, 0, op::excesses, query_id, null(), 128);        
        return ();
    }

    if (op == op::get_static_data) {
        send_msg(sender_address, 0, op::report_static_data, query_id, 
                 begin_cell().store_uint(storage::collection_index, 256).store_slice(storage::collection_address), 64);  ;; carry all the remaining value of the inbound message
        return ();
    }

    if (op == op::get_storage_data) {
        slice to_address = in_msg_body~load_msg_addr();

        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(to_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::report_storage_data, 32)
            .store_uint(query_id, 64)
            .store_ref(get_data());

        send_raw_message(msg.end_cell(), 64);

        return ();
    }
    
    ;; if (op == 0xffff) {  ;; for debug only
    ;;     set_code(in_msg_body~load_ref());
    ;;     return ();
    ;; }
    
    throw(0xffff);
}


;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
  load_data();
  return (storage::init?, storage::collection_index, storage::collection_address, storage::owner_address, begin_cell().end_cell());
}

(int, int, slice, slice, int, int, int, int, int) get_storage_data() method_id {
    load_data();
    return (storage::init?, storage::collection_index, storage::collection_address, storage::owner_address, 
            storage::index_in_states, storage::locked_value, storage::unlock_time, storage::claimed_rewards,
            storage::is_transferrable);
}

(int, int, int, int, int, int, slice, slice, int, int) get_nft_content() method_id {  ;; legacy
    load_data();
    return (storage::claimed_rewards, storage::start_time, storage::unlock_time - storage::start_time,
             storage::locked_value, 0, storage::collection_index, storage::owner_address, 
             storage::collection_address, storage::index_in_states, storage::is_transferrable);
}

(int) get_version() method_id {
    return 4;
}