#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


global int storage::init?;                    ;; is collection initialized? (uint1)
global int storage::next_item_index;          ;; next item index (uint32)

global slice storage::admin_address;          ;; admin address (MsgAddress)
global cell storage::collection_content;      ;; collection content (Cell)
global cell storage::nft_item_code;           ;; NFT code (Cell)

global int storage::start_time;               ;; timestamp of the start of the staking program (uint32)
global int storage::end_time;                 ;; timestamp of the end of the staking program (uint32)
global int storage::premint_open;             ;; is premint open? always zero for normal pools (uint1)

global int storage::minimum_deposit;          ;; minimum deposit (Coins)
global int storage::min_lock_period;          ;; minimum lock period in seconds (uint32)

global int storage::farming_speed;            ;; current farming speed (Coins)
global int storage::last_update_time;         ;; time of the last update (uint32)
global int storage::last_tvl;                 ;; current TVL (coins)
global int storage::distributed_rewards;      ;; amount of rewards currently distributed among stakers (per `distributed_rewards_devider` jettons)
global int storage::rewards_balance;          ;; total rewards (Coins)
global int storage::commission_factor;        ;; uint16. commission rate = commission_factor / commission_devider

global int storage::wallet_rewards_changed;   ;; is rewards wallet initialized? (uint1)
global int storage::wallet_lock_changed;      ;; is lock wallet initialized? (uint1)

global slice storage::creator_address;         ;; creator address (MsgAddress)
global slice storage::lock_wallet_address;     ;; address of jetton wallet for locked jettons (MsgAddress)
global slice storage::rewards_wallet_address;  ;; address of jetton wallet for rewards jettons (MsgAddress)


() load_data() impure inline {
    var ds = get_data().begin_parse();

    storage::init?                  = ds~load_uint(1);
    storage::next_item_index        = ds~load_uint(32);
    storage::last_update_time       = ds~load_uint(32);

    storage::nft_item_code          = ds~load_ref();
    storage::collection_content     = ds~load_ref();

    storage::last_tvl               = ds~load_coins();
    storage::distributed_rewards    = ds~load_uint(256);

    storage::min_lock_period        = ds~load_uint(32);
    storage::farming_speed          = ds~load_coins();

    storage::rewards_wallet_address = ds~load_msg_addr();
    storage::rewards_balance        = ds~load_coins();
    storage::commission_factor      = ds~load_uint(16);

    storage::wallet_lock_changed    = ds~load_uint(1);
    storage::wallet_rewards_changed = ds~load_uint(1);
    storage::premint_open           = ds~load_uint(1);

    ds = ds~load_ref().begin_parse();
    storage::start_time             = ds~load_uint(32);
    storage::end_time               = ds~load_uint(32);
    storage::minimum_deposit        = ds~load_coins();

    storage::lock_wallet_address    = ds~load_msg_addr();
    storage::admin_address          = ds~load_msg_addr();
    storage::creator_address        = ds~load_msg_addr();
}


() save_data() impure inline {
    set_data(
        begin_cell()
        .store_uint(storage::init?, 1)
        .store_uint(storage::next_item_index, 32)
        .store_uint(storage::last_update_time, 32)
        .store_ref(storage::nft_item_code)
        .store_ref(storage::collection_content)
        .store_coins(storage::last_tvl)
        .store_uint(storage::distributed_rewards, 256)
        .store_uint(storage::min_lock_period, 32)
        .store_coins(storage::farming_speed)
        .store_slice(storage::rewards_wallet_address)
        .store_coins(storage::rewards_balance)
        .store_uint(storage::commission_factor, 16)
        .store_uint(storage::wallet_lock_changed, 1)
        .store_uint(storage::wallet_rewards_changed, 1)
        .store_uint(storage::premint_open, 1)
        .store_ref(
            begin_cell()
                .store_uint(storage::start_time, 32)
                .store_uint(storage::end_time, 32)
                .store_coins(storage::minimum_deposit)
                .store_slice(storage::lock_wallet_address)
                .store_slice(storage::admin_address)
                .store_slice(storage::creator_address)
            .end_cell()
        )
        .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    ;; int fwd_fee = get_forward_fee(cs);

    load_data();

    if (storage::init? == 0) {  ;; request jetton wallets' addresses after deploy
        storage::init? = 1;

        builder tmp = begin_cell()
                        .store_coins(gas::provide_addr)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_uint(op::provide_wallet_address, 32)
                        .store_uint(now(), 64)
                        .store_slice(my_address())
                        .store_uint(0, 1);
        builder msg_rewards = begin_cell().store_uint(0x18, 6).store_slice(storage::rewards_wallet_address).store_builder(tmp);
        send_raw_message(msg_rewards.end_cell(), 1);

        if (~ equal_slices(storage::rewards_wallet_address, storage::lock_wallet_address)) {
            builder msg_lock = begin_cell().store_uint(0x18, 6).store_slice(storage::lock_wallet_address).store_builder(tmp);
            send_raw_message(msg_lock.end_cell(), 1);
        }

        save_data();
        return ();
    }

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if  ((op == op::transfer_notification) | (op == op::premint)) {
        int transferred_jettons = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        int lock_period = in_msg_body~load_uint(32);
        
        int time_now = now();

        if (lock_period == 0xffffffff) {  ;; add rewards
            throw_if(exc::out_of_gas, msg_value < gas::send_commissions);
            if (storage::wallet_rewards_changed == 0) {  ;; for non-discoverable jettons set wallet after the first transaction
                if (equal_slices(storage::lock_wallet_address, storage::rewards_wallet_address)) {
                    storage::lock_wallet_address = sender_address;
                    storage::wallet_lock_changed = 1;
                }
                storage::rewards_wallet_address = sender_address;
                storage::wallet_rewards_changed = 1;
            } 

            int new_end_time = storage::end_time;
            ifnot (slice_empty?(in_msg_body)) {
                new_end_time = in_msg_body~load_uint(32);  ;; admin can set new end time
            }

            ifnot (equal_slices(sender_address, storage::rewards_wallet_address) & (new_end_time > time_now) &
                   ((new_end_time == storage::end_time) | equal_slices(from_address, storage::creator_address))) {
                ;; return jettons if sender is incorrect wallet address or new_end_time < now or someone (not admin) trying to change end_time
                send_jettons(query_id, transferred_jettons, from_address, sender_address, 0, 64, 1, 1, null());  
                return ();
            }

            int commission = muldiv(transferred_jettons, storage::commission_factor, commission_devider);
            storage::rewards_balance += transferred_jettons - commission;

            if ((storage::farming_speed != 0)) {  ;; if pool is active -> change farming speed
                ifnot (storage::end_time < time_now) {
                    storage::rewards_balance -= muldiv((time_now - storage::start_time), storage::farming_speed, farming_speed_devider);
                }

                int new_farming_speed = (storage::last_tvl != 0) ? muldiv(storage::rewards_balance, farming_speed_devider, (new_end_time - time_now)) : 0;

                if ((new_farming_speed < storage::farming_speed) & (time_now < storage::end_time) & (storage::last_tvl > 0)) {  ;; it is impossible to decrease farming speed if staking hasn't ended
                    send_jettons(query_id, transferred_jettons, from_address, sender_address, 0, 64, 1, 1, null());
                    return ();
                }
                else {
                    if ((storage::last_tvl > 0) & (time_now < storage::end_time)) {
                        storage::distributed_rewards += muldiv((time_now - storage::last_update_time) * storage::farming_speed, distributed_rewards_devider, (farming_speed_devider * storage::last_tvl));
                    }
                    storage::farming_speed = new_farming_speed;
                    storage::start_time = time_now;
                }
            }
            storage::end_time = new_end_time;

            send_jettons(query_id, commission, storage::admin_address, storage::rewards_wallet_address, 0, 64, 0, gas::receive_commissions, begin_cell().store_uint(op::send_commissions, 32).end_cell());
        }
        else {  ;; stake jettons
            throw_if(exc::out_of_gas, msg_value < gas::stake);

            if (storage::wallet_lock_changed == 0) {  ;; for non-discoverable jettons set wallets after the first transaction
                if (equal_slices(storage::lock_wallet_address, storage::rewards_wallet_address)) {
                    storage::rewards_wallet_address  = sender_address; 
                    storage::wallet_rewards_changed = 1;
                }
                storage::lock_wallet_address = sender_address;
                storage::wallet_lock_changed = 1;
            } 

            ifnot ((equal_slices(sender_address, storage::lock_wallet_address) | (op == op::premint)) & (lock_period >= storage::min_lock_period) &
                   (transferred_jettons >= storage::minimum_deposit) & (time_now > storage::start_time) & (time_now < storage::end_time)) {  ;; check sender & staking conditions
                send_jettons(query_id, transferred_jettons, from_address, sender_address, 0, 64, 1, 0, null());
                return ();
            } 

            int withdrawal_allowed = 1;  ;; not allowed for preminted NFTs
            int nft_transfer_allowed = 1;  ;; will new NFT allow transfers?
            if (op == op::premint) {
                throw_unless(exc::premint_closed, (storage::premint_open == 1));
                throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::creator_address));
                withdrawal_allowed = 0;
                nft_transfer_allowed = 0;
            }
            elseif (in_msg_body.slice_bits() > 0) {
                nft_transfer_allowed = in_msg_body~load_uint(1);
            }

            if (storage::farming_speed == 0 ) {  ;; if pool is not active (it's the first position in this pool)
                storage::start_time = time_now;
                storage::farming_speed = muldiv(storage::rewards_balance, farming_speed_devider, (storage::end_time - time_now));
            }
            if (storage::last_tvl != 0) {
                storage::distributed_rewards += muldiv((time_now - storage::last_update_time) * storage::farming_speed, distributed_rewards_devider, (farming_speed_devider * storage::last_tvl));
            }
            storage::last_tvl += transferred_jettons;
            
            cell nft_content = begin_cell()
                                    .store_uint(storage::next_item_index, 64)
                                    .store_slice(from_address)
                                    .store_coins(transferred_jettons)
                                    .store_uint(time_now, 32)
                                    .store_uint(time_now + lock_period, 32)
                                    .store_uint(storage::distributed_rewards, 256)
                                    .store_uint(nft_transfer_allowed, 1)
                                    .store_uint(withdrawal_allowed, 1)
                                .end_cell();
            deploy_nft_item(storage::next_item_index, storage::nft_item_code, nft_content, my_address());  ;; deploy bond NFT
            storage::next_item_index += 1;
        }

        storage::last_update_time = time_now;
        save_data();
        return ();
    }

    if ((op == op::claim_nft) | (op == op::withdraw_nft)) {
        raw_reserve(0, 4);

        int item_index = in_msg_body~load_uint(32);
        slice expected_item_address = calculate_nft_address_by_index(my_address(), storage::nft_item_code, item_index);
        throw_unless(exc::incorrect_sender, equal_slices(expected_item_address, sender_address));  ;; check that NFT belongs to this collection
        
        slice from_address          = in_msg_body~load_msg_addr();
        int nft_locked_jettons      = in_msg_body~load_coins();
        int nft_distributed_rewards = in_msg_body~load_uint(256);
        int withdrawal_allowed      = in_msg_body~load_uint(1);

        int time_now = min(now(), storage::end_time);

        storage::distributed_rewards += muldiv((time_now - storage::last_update_time) * storage::farming_speed, distributed_rewards_devider, (farming_speed_devider * storage::last_tvl));

        int user_rewards = muldiv(storage::distributed_rewards - nft_distributed_rewards, nft_locked_jettons, distributed_rewards_devider);
        send_jettons(query_id, user_rewards, from_address, storage::rewards_wallet_address, gas::jetton_transfer, 0, 0, 1, null());  ;; send rewards

        if ((op == op::withdraw_nft) & withdrawal_allowed) {
            send_jettons(query_id, nft_locked_jettons * withdrawal_allowed, from_address, storage::lock_wallet_address, gas::jetton_transfer, 0, 0, 1, null());  ;; send withdrawed jettons
            storage::last_tvl -= nft_locked_jettons;
            from_address = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;
        }
        else {
            builder change_nft_state_msg = begin_cell()
                                            .store_uint(0x18, 6)
                                            .store_slice(sender_address)
                                            .store_coins(gas::change_state_nft)
                                            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                                            .store_uint(1, 1)
                                            .store_ref(
                                                begin_cell()
                                                    .store_uint(op::change_state_nft, 32)
                                                    .store_uint(query_id, 64)
                                                    .store_uint(storage::distributed_rewards, 256)
                                                    .store_coins(user_rewards)
                                                    .store_int((op == op::withdraw_nft), 1)  ;; ((op == op::withdraw_nft) ? 1 : 0)
                                                .end_cell()
                                            );
            send_raw_message(change_nft_state_msg.end_cell(), 0);
            
            send_msg(from_address, 0, op::excesses, query_id, null(), 128);  ;; change NFT state description
        }
        storage::last_update_time = time_now;
        
        save_data();
        return ();
    }

    if (op == op::take_wallet_address) {  ;; change jetton wallet address (used only once)
        slice reported_wallet_address = in_msg_body~load_msg_addr();
        if (equal_slices(sender_address, storage::lock_wallet_address)) {
            storage::lock_wallet_address = reported_wallet_address;
            storage::wallet_lock_changed = 1;
        }
        if (equal_slices(sender_address, storage::rewards_wallet_address)) {
            storage::rewards_wallet_address = reported_wallet_address;
            storage::wallet_rewards_changed = 1;
        }
        
        save_data();
        return ();
    }

    if (op == op::get_storage_data) {
        slice to_address = in_msg_body~load_msg_addr();
        var msg = begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(to_address)
                    .store_coins(0)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op::report_storage_data, 32)
                    .store_uint(query_id, 64)
                    .store_slice(sender_address)
                    .store_uint(now(), 32)
                    .store_ref(get_data())
                    .store_slice(in_msg_body);

        send_raw_message(msg.end_cell(), 64);
        return ();
    }

    ;; Admin commands
    
    if (op == op::close_premint) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::creator_address));
        storage::premint_open = 0;
        save_data();
        return ();
    }

    if (op == op::change_start_time) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::creator_address));
        throw_unless(exc::pool_active, storage::farming_speed == 0);
        
        int new_start_time = in_msg_body~load_uint(32);
        throw_unless(exc::incorrect_input, storage::end_time > new_start_time);
        storage::start_time = new_start_time;

        save_data();
        return ();
    }

    if (op == op::withdraw_rewards) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::creator_address));
        throw_unless(exc::pool_active, storage::farming_speed == 0);  ;; can withdraw rewards only before farming starts

        int jetton_amount = in_msg_body~load_coins();
        throw_unless(exc::not_enough_jettons, jetton_amount <= storage::rewards_balance);
        
        raw_reserve(gas::min_tons_for_storage, 0);
        send_jettons(query_id, jetton_amount, sender_address, storage::rewards_wallet_address, 0, 128, 1, 1, null());
        storage::rewards_balance -= jetton_amount;
        
        save_data();
        return ();
    }

    if (op == op::withdraw_accident_jettons) {
        throw_unless(exc::incorrect_sender,
                     equal_slices(sender_address, storage::admin_address) | equal_slices(sender_address, storage::creator_address));
        throw_unless(exc::out_of_gas, msg_value >= gas::jetton_transfer);
        
        slice jetton_to_withdraw = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        int is_reward_jetton = equal_slices(jetton_to_withdraw, storage::rewards_wallet_address);
        int is_lock_jetton = equal_slices(jetton_to_withdraw, storage::lock_wallet_address);
        
        if (storage::last_tvl != 0) {
            throw_if(exc::incorrect_jetton, is_lock_jetton | is_reward_jetton);  ;; cant't withdraw main jetton
        }
        elseif (is_reward_jetton & (storage::rewards_balance > jetton_amount)) {
            storage::rewards_balance -= jetton_amount;
            save_data();
        }

        raw_reserve(gas::min_tons_for_storage, 0);
        send_jettons(query_id, jetton_amount, sender_address, jetton_to_withdraw, 0, 128, 1, 1, null());
        return ();
    }

    ;; opportunity to change code & data before audit (will be removed in the future)
    ;; if (op == 0xfffe) { 
    ;;     ;; throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::admin_address));
    ;;     set_data(in_msg_body~load_ref());
    ;;     return ();
    ;; }
    ;; if (op == 0xffff) { 
    ;;     ;; throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::admin_address));
    ;;     set_code(in_msg_body~load_ref());
    ;;     return ();
    ;; }

    throw(exc::unsupported_op);
}


;; Get methods

(int, cell, slice) get_collection_data() method_id {
  load_data();
  slice cs = storage::collection_content.begin_parse();
  return (storage::next_item_index, cs~load_ref(), "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a);
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    return calculate_nft_address_by_index(my_address(), storage::nft_item_code, index);
}

cell get_nft_content(int index, cell individual_content) method_id {
    load_data();
    slice cs = storage::collection_content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();

    builder string = begin_cell();
    tuple chars = null();
    do {
        int r = index~divmod(10);
        chars = cons(r + 48, chars);
    } until (index == 0);
    do {
        int char = chars~list_next();
        string~store_uint(char, 8);
    } until (null?(chars));
    
    return (begin_cell()
                .store_uint(1, 8)  ;; offchain tag
                .store_slice(common_content)
                .store_ref(string.end_cell())
            .end_cell());
}

(int, int, slice) royalty_params() method_id {  ;; for marketplaces and explorers
    return (0, 100, my_address());
}

(int, slice, cell, cell, int, int, int, int, int, int, int, int, int, slice, slice, slice, int, int, int) get_staking_data() method_id {
    load_data();
    
    return (storage::init?, storage::admin_address, storage::collection_content, storage::nft_item_code, storage::next_item_index,
            storage::start_time, storage::end_time, storage::minimum_deposit, storage::min_lock_period, storage::farming_speed, 
            storage::rewards_balance, storage::commission_factor, 0, storage::creator_address, storage::lock_wallet_address,
            storage::rewards_wallet_address, storage::last_tvl, storage::distributed_rewards, storage::last_update_time);
}

(int) get_premint_status() method_id {
    load_data();
    return storage::premint_open;
}

(cell) raw_get_data() method_id {
    return get_data();
}

(int) get_version() method_id {
    return 5;
}
